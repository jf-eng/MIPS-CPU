$date
	Thu Dec  2 00:38:35 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module ir_tb $end
$var wire 1 ! state_next $end
$var wire 32 " instruction_word [31:0] $end
$var reg 1 # clk $end
$var reg 32 $ read_data [31:0] $end
$var reg 1 % reset $end
$var reg 1 & stall $end
$var reg 1 ' state $end
$scope module dut $end
$var wire 1 # clk $end
$var wire 32 ( read_data [31:0] $end
$var wire 1 & stall $end
$var wire 1 ' state $end
$var reg 16 ) alu_immediate [15:0] $end
$var reg 6 * func_code [5:0] $end
$var reg 6 + instruction_opcode [5:0] $end
$var reg 32 , instruction_word [31:0] $end
$var reg 32 - ir_hold [31:0] $end
$var reg 32 . ir_hold_next [31:0] $end
$var reg 5 / rd [4:0] $end
$var reg 5 0 rs [4:0] $end
$var reg 5 1 rt [4:0] $end
$var reg 5 2 shamt [4:0] $end
$var reg 5 3 special_branch_codes [4:0] $end
$var reg 1 4 stall_prev $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
x'
0&
0%
bx $
0#
bx "
x!
$end
#2
1!
04
0'
1%
1#
#4
0%
0#
#6
0!
b11111 3
b111111 *
b1111111111111111 )
b11111 2
b11111 /
b11111 1
b11111 0
b111111 +
b11111111111111111111111111111111 .
b11111111111111111111111111111111 "
b11111111111111111111111111111111 ,
1'
b11111111111111111111111111111111 $
b11111111111111111111111111111111 (
1#
#8
0#
#10
1!
b1 $
b1 (
b11111111111111111111111111111111 -
0'
1#
#12
0#
#14
b111110 *
b1111111111111110 )
b11111111111111111111111111111110 .
b11111111111111111111111111111110 "
b11111111111111111111111111111110 ,
1'
1&
b11111111111111111111111111111110 $
b11111111111111111111111111111110 (
1#
#16
0#
#18
0!
bx $
bx (
0&
b11111111111111111111111111111110 -
14
1#
#20
0#
#22
1!
0'
04
1#
#24
0#
#26
b111101 *
b1111111111111101 )
b11111111111111111111111111111101 .
b11111111111111111111111111111101 "
b11111111111111111111111111111101 ,
1&
b11111111111111111111111111111101 $
b11111111111111111111111111111101 (
1'
1#
#28
0#
#30
b11111111111111111111111111111101 -
14
bx $
bx (
1#
#32
0#
#34
0!
0&
1#
#36
0#
#38
0'
04
1&
1#
#40
0#
#42
1!
0&
14
1#
#44
0#
#46
0!
b11111 3
b111100 *
b1111111111111100 )
b11111 2
b11111 /
b11111 1
b11111 0
b111111 +
b11111111111111111111111111111100 .
b11111111111111111111111111111100 "
b11111111111111111111111111111100 ,
1'
04
b11111111111111111111111111111100 $
b11111111111111111111111111111100 (
1#
#48
0#
#50
1&
b1 $
b1 (
0!
b11111111111111111111111111111100 -
0'
1#
#52
0#
#54
14
1#
#56
0#
#58
1!
0&
1#
#60
0#
#62
b11111111111111111111111111111011 $
b11111111111111111111111111111011 (
0!
b11111 3
b111011 *
b1111111111111011 )
b11111 2
b11111 /
b11111 1
b11111 0
b111111 +
b11111111111111111111111111111011 .
b11111111111111111111111111111011 "
b11111111111111111111111111111011 ,
1'
04
1#
#64
0#
#66
b1 $
b1 (
1!
b11111111111111111111111111111011 -
0'
1#
#68
0#
#70
0!
b0 3
b1 *
b1 )
b0 2
b0 /
b0 1
b0 0
b0 +
b1 .
b1 "
b1 ,
1'
1#
