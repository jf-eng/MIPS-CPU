$date
	Fri Nov 26 17:47:31 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module mips_cpu_harvard_tb $end
$var wire 8 ! rom_wordaddr [7:0] $end
$var wire 32 " register_v0 [31:0] $end
$var wire 8 # ram_wordaddr [7:0] $end
$var wire 32 $ instr_readdata [31:0] $end
$var wire 32 % instr_address [31:0] $end
$var wire 32 & data_writedata [31:0] $end
$var wire 1 ' data_write $end
$var wire 32 ( data_readdata [31:0] $end
$var wire 1 ) data_read $end
$var wire 32 * data_address [31:0] $end
$var wire 1 + active $end
$var reg 1 , clk $end
$var reg 1 - clk_enable $end
$var reg 1 . reset $end
$scope module dut $end
$var wire 1 , clk $end
$var wire 1 - clk_enable $end
$var wire 32 / data_readdata [31:0] $end
$var wire 32 0 instr_readdata [31:0] $end
$var wire 1 . reset $end
$var wire 5 1 shamt [4:0] $end
$var wire 5 2 rt [4:0] $end
$var wire 5 3 rs [4:0] $end
$var wire 32 4 register_v0 [31:0] $end
$var wire 32 5 read_data_0 [31:0] $end
$var wire 5 6 rd [4:0] $end
$var wire 32 7 instr_address [31:0] $end
$var wire 1 8 finish $end
$var wire 1 ' data_write $end
$var wire 1 ) data_read $end
$var wire 32 9 data_address [31:0] $end
$var wire 16 : alu_immediate [15:0] $end
$var wire 1 ; Z $end
$var wire 1 < Xor $end
$var wire 1 = WriteLo $end
$var wire 1 > WriteHi $end
$var wire 1 ? Unsigned $end
$var wire 1 @ Sub $end
$var wire 1 A ShiftAmt $end
$var wire 1 B SR $end
$var wire 1 C SL $end
$var wire 1 D RegWrite $end
$var wire 1 E RegDst $end
$var wire 1 F ReadLo $end
$var wire 1 G ReadHi $end
$var wire 1 H R31 $end
$var wire 1 I Or $end
$var wire 1 J N $end
$var wire 1 K Mul $end
$var wire 1 L MemtoReg $end
$var wire 1 M EQ $end
$var wire 1 N Div $end
$var wire 1 O Boolean $end
$var wire 1 P B_link $end
$var wire 1 Q Arithmetic $end
$var wire 1 R And $end
$var wire 1 S Add $end
$var wire 1 T ALUSrc $end
$var reg 1 + active $end
$var reg 32 U data_writedata [31:0] $end
$scope module controlpathblock $end
$var wire 1 , clk $end
$var wire 32 V instr_readdata [31:0] $end
$var wire 1 . reset $end
$var wire 1 W state $end
$var wire 5 X special_branch_codes [4:0] $end
$var wire 5 Y shamt [4:0] $end
$var wire 5 Z rt [4:0] $end
$var wire 5 [ rs [4:0] $end
$var wire 32 \ read_data_0 [31:0] $end
$var wire 5 ] rd [4:0] $end
$var wire 32 ^ instruction_word [31:0] $end
$var wire 6 _ instruction_opcode [5:0] $end
$var wire 32 ` instr_address [31:0] $end
$var wire 6 a func_code [5:0] $end
$var wire 1 8 finish $end
$var wire 16 b alu_immediate [15:0] $end
$var wire 1 ; Z $end
$var wire 1 < Xor $end
$var wire 1 = WriteLo $end
$var wire 1 > WriteHi $end
$var wire 1 ? Unsigned $end
$var wire 1 @ Sub $end
$var wire 1 A ShiftAmt $end
$var wire 1 B SR $end
$var wire 1 C SL $end
$var wire 1 D RegWrite $end
$var wire 1 E RegDst $end
$var wire 1 F ReadLo $end
$var wire 1 G ReadHi $end
$var wire 1 H R31 $end
$var wire 1 I Or $end
$var wire 1 J N $end
$var wire 1 K Mul $end
$var wire 1 L MemtoReg $end
$var wire 1 ' MemWrite $end
$var wire 1 ) MemRead $end
$var wire 1 M EQ $end
$var wire 1 N Div $end
$var wire 1 O Boolean $end
$var wire 1 P B_link $end
$var wire 1 Q Arithmetic $end
$var wire 1 R And $end
$var wire 1 S Add $end
$var wire 1 T ALUSrc $end
$scope module control_block $end
$var wire 1 W state $end
$var wire 5 c special_branch_codes [4:0] $end
$var wire 6 d instruction_opcode [5:0] $end
$var wire 6 e func_code [5:0] $end
$var wire 1 P B_link $end
$var reg 1 T ALUSrc $end
$var reg 1 S Add $end
$var reg 1 R And $end
$var reg 1 Q Arithmetic $end
$var reg 1 O Boolean $end
$var reg 1 N Div $end
$var reg 1 ) MemRead $end
$var reg 1 ' MemWrite $end
$var reg 1 L MemtoReg $end
$var reg 1 K Mul $end
$var reg 1 I Or $end
$var reg 1 H R31 $end
$var reg 1 G ReadHi $end
$var reg 1 F ReadLo $end
$var reg 1 E RegDst $end
$var reg 1 D RegWrite $end
$var reg 1 C SL $end
$var reg 1 B SR $end
$var reg 1 A ShiftAmt $end
$var reg 1 @ Sub $end
$var reg 1 ? Unsigned $end
$var reg 1 > WriteHi $end
$var reg 1 = WriteLo $end
$var reg 1 < Xor $end
$upscope $end
$scope module ir_block $end
$var wire 32 f read_data [31:0] $end
$var reg 16 g alu_immediate [15:0] $end
$var reg 6 h func_code [5:0] $end
$var reg 6 i instruction_opcode [5:0] $end
$var reg 32 j instruction_word [31:0] $end
$var reg 5 k rd [4:0] $end
$var reg 5 l rs [4:0] $end
$var reg 5 m rt [4:0] $end
$var reg 5 n shamt [4:0] $end
$var reg 5 o special_branch_codes [4:0] $end
$upscope $end
$scope module pc_block $end
$var wire 1 , clk $end
$var wire 32 p instruction_word [31:0] $end
$var wire 1 . reset $end
$var wire 1 W state $end
$var wire 32 q read_data_0 [31:0] $end
$var wire 2 r jump_addr_selection [1:0] $end
$var wire 1 ; Z $end
$var wire 1 J N $end
$var wire 1 M EQ $end
$var wire 1 P B_link $end
$var reg 32 s addr [31:0] $end
$var reg 32 t addr_next [31:0] $end
$var reg 1 8 finish $end
$var reg 32 u instruction_word_prev [31:0] $end
$scope module branch_controlblock $end
$var wire 1 , clk $end
$var wire 32 v instruction_word [31:0] $end
$var wire 1 W state $end
$var wire 1 ; Z $end
$var wire 1 J N $end
$var wire 1 M EQ $end
$var reg 1 P B_link $end
$var reg 2 w jump_addr_selection [1:0] $end
$var reg 2 x jump_addr_selection_next [1:0] $end
$upscope $end
$upscope $end
$scope module statemachine_block $end
$var wire 1 , clk $end
$var wire 1 . reset $end
$var wire 1 y state_next $end
$var reg 1 W state $end
$upscope $end
$upscope $end
$scope module datapathblock $end
$var wire 1 T ALUSrc $end
$var wire 1 S Add $end
$var wire 1 R And $end
$var wire 1 Q Arithmetic $end
$var wire 1 P B_link $end
$var wire 1 O Boolean $end
$var wire 1 N Div $end
$var wire 1 L MemtoReg $end
$var wire 1 K Mul $end
$var wire 1 I Or $end
$var wire 1 G ReadHi $end
$var wire 1 F ReadLo $end
$var wire 1 E RegDst $end
$var wire 1 D RegWrite $end
$var wire 1 C SL $end
$var wire 1 B SR $end
$var wire 1 A ShiftAmt $end
$var wire 1 @ Sub $end
$var wire 1 ? Unsigned $end
$var wire 1 > WriteHi $end
$var wire 1 = WriteLo $end
$var wire 1 < Xor $end
$var wire 16 z alu_immediate [15:0] $end
$var wire 1 , clk $end
$var wire 32 { data_readdata [31:0] $end
$var wire 32 | instr_address [31:0] $end
$var wire 5 } rd [4:0] $end
$var wire 1 . reset $end
$var wire 5 ~ rs [4:0] $end
$var wire 5 !" rt [4:0] $end
$var wire 5 "" shamt [4:0] $end
$var wire 32 #" register_v0 [31:0] $end
$var wire 32 $" read_data_1 [31:0] $end
$var wire 32 %" read_data_0 [31:0] $end
$var wire 32 &" alu_out [31:0] $end
$var wire 1 ; Z $end
$var wire 1 J N $end
$var wire 1 M EQ $end
$var reg 32 '" op2 [31:0] $end
$var reg 5 (" write_addr [4:0] $end
$var reg 32 )" write_data [31:0] $end
$scope module alu_block $end
$var wire 1 S Add $end
$var wire 1 R And $end
$var wire 1 Q Arithmetic $end
$var wire 1 O Boolean $end
$var wire 1 N Div $end
$var wire 1 K Mul $end
$var wire 1 I Or $end
$var wire 1 G ReadHi $end
$var wire 1 F ReadLo $end
$var wire 1 C Sl $end
$var wire 1 B Sr $end
$var wire 1 @ Sub $end
$var wire 1 ? Unsigned $end
$var wire 1 > WriteHi $end
$var wire 1 = WriteLo $end
$var wire 1 < Xor $end
$var wire 1 , clk $end
$var wire 32 *" op1_s [31:0] $end
$var wire 32 +" op2 [31:0] $end
$var wire 32 ," op2_s [31:0] $end
$var wire 32 -" subtractedUnsigned [31:0] $end
$var wire 32 ." subtractedSigned [31:0] $end
$var wire 32 /" op1 [31:0] $end
$var wire 64 0" multiplied [63:0] $end
$var reg 32 1" alu_out [31:0] $end
$var reg 1 M eq $end
$var reg 32 2" hi [31:0] $end
$var reg 32 3" lo [31:0] $end
$var reg 1 J n $end
$var reg 1 ; z $end
$upscope $end
$scope module regfile_block $end
$var wire 1 , clk $end
$var wire 32 4" r0 [31:0] $end
$var wire 32 5" r1 [31:0] $end
$var wire 32 6" r10 [31:0] $end
$var wire 32 7" r11 [31:0] $end
$var wire 32 8" r12 [31:0] $end
$var wire 32 9" r13 [31:0] $end
$var wire 32 :" r14 [31:0] $end
$var wire 32 ;" r15 [31:0] $end
$var wire 32 <" r16 [31:0] $end
$var wire 32 =" r17 [31:0] $end
$var wire 32 >" r18 [31:0] $end
$var wire 32 ?" r19 [31:0] $end
$var wire 32 @" r2 [31:0] $end
$var wire 32 A" r20 [31:0] $end
$var wire 32 B" r21 [31:0] $end
$var wire 32 C" r22 [31:0] $end
$var wire 32 D" r23 [31:0] $end
$var wire 32 E" r24 [31:0] $end
$var wire 32 F" r25 [31:0] $end
$var wire 32 G" r26 [31:0] $end
$var wire 32 H" r27 [31:0] $end
$var wire 32 I" r28 [31:0] $end
$var wire 32 J" r29 [31:0] $end
$var wire 32 K" r3 [31:0] $end
$var wire 32 L" r30 [31:0] $end
$var wire 32 M" r31 [31:0] $end
$var wire 32 N" r4 [31:0] $end
$var wire 32 O" r5 [31:0] $end
$var wire 32 P" r6 [31:0] $end
$var wire 32 Q" r7 [31:0] $end
$var wire 32 R" r8 [31:0] $end
$var wire 32 S" r9 [31:0] $end
$var wire 5 T" read_addr_0 [4:0] $end
$var wire 5 U" read_addr_1 [4:0] $end
$var wire 32 V" register_v0 [31:0] $end
$var wire 1 . reset $end
$var wire 1 D wen $end
$var wire 5 W" write_addr [4:0] $end
$var wire 32 X" write_data [31:0] $end
$var reg 32 Y" read_data_0 [31:0] $end
$var reg 32 Z" read_data_1 [31:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 [" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 \" i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11111111 \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
xy
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
xW
bx V
bx U
0T
0S
0R
0Q
xP
0O
0N
xM
0L
0K
xJ
0I
xH
0G
0F
0E
xD
0C
0B
0A
0@
0?
0>
0=
0<
x;
bx :
bx 9
x8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
0.
x-
0,
x+
bx *
0)
bx (
0'
bx &
bx %
bx $
b0xxxxxx #
bx "
b0xxxxxx !
$end
#2
0H
0D
0P
b0 x
0;
0J
0M
1,
#4
1.
0,
#6
b0 ."
b0 0"
b0 ,"
b0 -"
b0 '"
b0 +"
b1 ("
b1 W"
b0 $"
b0 Z"
b0 *"
b0 5
b0 \
b0 q
b0 %"
b0 /"
b0 Y"
b1 X
b1 c
b1 o
b100 a
b100 e
b100 h
b100 :
b100 b
b100 g
b100 z
b0 1
b0 Y
b0 n
b0 ""
b0 6
b0 ]
b0 k
b0 }
b1 2
b1 Z
b1 m
b1 !"
b1 U"
b0 3
b0 [
b0 l
b0 ~
b0 T"
b10001100000000010000000000000100 ^
b10001100000000010000000000000100 j
b10001100000000010000000000000100 p
b10001100000000010000000000000100 v
b100011 _
b100011 d
b100011 i
b10001100000000010000000000000100 $
b10001100000000010000000000000100 0
b10001100000000010000000000000100 V
b10001100000000010000000000000100 f
b0 !
b10111111110000000000000000000100 t
08
1L
b0 M"
b0 L"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
b0 K"
b0 "
b0 4
b0 #"
b0 V"
b0 @"
b0 5"
b0 4"
1+
b10111111110000000000000000000000 %
b10111111110000000000000000000000 7
b10111111110000000000000000000000 `
b10111111110000000000000000000000 s
b10111111110000000000000000000000 |
1y
0W
b100000 ["
1,
#8
0.
0,
#10
b1 )"
b1 X"
b1 (
b1 /
b1 {
b1 #
b11111111111111111111111111111100 ."
b100 *
b100 9
b100 &"
b100 1"
b100 ,"
b11111111111111111111111111111100 -"
b100 '"
b100 +"
1S
1D
1T
1)
0y
1W
1;
1M
1,
#12
0,
#14
b10 ("
b10 W"
b10 X
b10 c
b10 o
b1000 a
b1000 e
b1000 h
b1000 :
b1000 b
b1000 g
b1000 z
b10 2
b10 Z
b10 m
b10 !"
b10 U"
b10001100000000100000000000001000 ^
b10001100000000100000000000001000 j
b10001100000000100000000000001000 p
b10001100000000100000000000001000 v
bx )"
bx X"
b10001100000000100000000000001000 $
b10001100000000100000000000001000 0
b10001100000000100000000000001000 V
b10001100000000100000000000001000 f
b0 ."
bx (
bx /
bx {
b1 !
b0 ,"
b0 -"
b0 '"
b0 +"
b0 $"
b0 Z"
b10111111110000000000000000001000 t
0S
0D
0T
0)
b1 5"
0M
b10001100000000010000000000000100 u
b10111111110000000000000000000100 %
b10111111110000000000000000000100 7
b10111111110000000000000000000100 `
b10111111110000000000000000000100 s
b10111111110000000000000000000100 |
b0 r
b0 w
1y
0W
1,
#16
0,
#18
b10 #
b10 )"
b10 X"
b11111111111111111111111111111000 ."
b10 (
b10 /
b10 {
b1000 *
b1000 9
b1000 &"
b1000 1"
b1000 ,"
b11111111111111111111111111111000 -"
b1000 '"
b1000 +"
1S
1D
1T
1)
0y
1W
1M
1,
#20
0,
#22
b11 ("
b11 W"
b0 0"
b1 *"
b1 5
b1 \
b1 q
b1 %"
b1 /"
b1 Y"
b11 X
b11 c
b11 o
b11 a
b11 e
b11 h
b11 :
b11 b
b11 g
b11 z
b11 2
b11 Z
b11 m
b11 !"
b11 U"
b1 3
b1 [
b1 l
b1 ~
b1 T"
b100100001000110000000000000011 ^
b100100001000110000000000000011 j
b100100001000110000000000000011 p
b100100001000110000000000000011 v
b1001 _
b1001 d
b1001 i
bx )"
bx X"
b100100001000110000000000000011 $
b100100001000110000000000000011 0
b100100001000110000000000000011 V
b100100001000110000000000000011 f
b1 ."
bx (
bx /
bx {
b10 !
b0 ,"
b1 -"
b0 '"
b0 +"
b0 $"
b0 Z"
b10111111110000000000000000001100 t
0S
0D
0T
0)
b10 "
b10 4
b10 #"
b10 V"
b10 @"
0M
b10001100000000100000000000001000 u
b10111111110000000000000000001000 %
b10111111110000000000000000001000 7
b10111111110000000000000000001000 `
b10111111110000000000000000001000 s
b10111111110000000000000000001000 |
1y
0W
1,
#24
0,
#26
b1 #
b11111111111111111111111111111110 ."
b100 *
b100 9
b100 &"
b100 1"
b11 0"
b11 ,"
b11111111111111111111111111111110 -"
b11 '"
b11 +"
b100 )"
b100 X"
1?
1S
1D
1T
0L
0y
1W
0;
1,
#28
0,
#30
b10 *"
b10 5
b10 \
b10 q
b10 %"
b10 /"
b10 Y"
b100001 a
b100001 e
b100001 h
b1100000100001 :
b1100000100001 b
b1100000100001 g
b1100000100001 z
b11 6
b11 ]
b11 k
b11 }
b10 3
b10 [
b10 l
b10 ~
b10 T"
b10000110001100000100001 ^
b10000110001100000100001 j
b10000110001100000100001 p
b10000110001100000100001 v
b0 _
b0 d
b0 i
b10000110001100000100001 $
b10000110001100000100001 0
b10000110001100000100001 V
b10000110001100000100001 f
b11111111111111111111111111111110 ."
b11 !
b1000 0"
b100 ,"
b11111111111111111111111111111110 -"
b100 '"
b100 +"
b100 $"
b100 Z"
b10111111110000000000000000010000 t
bx )"
bx X"
0?
0S
0D
0T
1L
b100 K"
b100100001000110000000000000011 u
b10111111110000000000000000001100 %
b10111111110000000000000000001100 7
b10111111110000000000000000001100 `
b10111111110000000000000000001100 s
b10111111110000000000000000001100 |
1y
0W
1,
#32
0,
#34
b110 *
b110 9
b110 &"
b110 1"
b110 )"
b110 X"
1?
1S
1D
0L
1E
0y
1W
1,
#36
0,
#38
b11111111111111111111111111111100 ."
b1100 0"
b110 ,"
b11111111111111111111111111111100 -"
b110 '"
b110 +"
b100 !
b110 $"
b110 Z"
b10111111110000000000000000010100 t
bx )"
bx X"
0?
0S
0D
1L
0E
b110 K"
b10000110001100000100001 u
b10111111110000000000000000010000 %
b10111111110000000000000000010000 7
b10111111110000000000000000010000 `
b10111111110000000000000000010000 s
b10111111110000000000000000010000 |
1y
0W
1,
#40
0,
#42
b10 #
b1000 *
b1000 9
b1000 &"
b1000 1"
b1000 )"
b1000 X"
1?
1S
1D
0L
1E
0y
1W
1,
#44
0,
#46
b11111111111111111111111111111010 ."
b10000 0"
b1000 ,"
b11111111111111111111111111111010 -"
b1000 '"
b1000 +"
b101 !
b1000 $"
b1000 Z"
b10111111110000000000000000011000 t
bx )"
bx X"
0?
0S
0D
1L
0E
b1000 K"
b10111111110000000000000000010100 %
b10111111110000000000000000010100 7
b10111111110000000000000000010100 `
b10111111110000000000000000010100 s
b10111111110000000000000000010100 |
1y
0W
1,
#48
0,
#50
b1010 *
b1010 9
b1010 &"
b1010 1"
b1010 )"
b1010 X"
1?
1S
1D
0L
1E
0y
1W
1,
#52
0,
#54
b11111111111111111111111111111000 ."
b10100 0"
b1010 ,"
b11111111111111111111111111111000 -"
b1010 '"
b1010 +"
b110 !
b1010 $"
b1010 Z"
b10111111110000000000000000011100 t
bx )"
bx X"
0?
0S
0D
1L
0E
b1010 K"
b10111111110000000000000000011000 %
b10111111110000000000000000011000 7
b10111111110000000000000000011000 `
b10111111110000000000000000011000 s
b10111111110000000000000000011000 |
1y
0W
1,
#56
0,
#58
b11 #
b1100 *
b1100 9
b1100 &"
b1100 1"
b1100 )"
b1100 X"
1?
1S
1D
0L
1E
0y
1W
1,
#60
0,
#62
b11111111111111111111111111110110 ."
b11000 0"
b1100 ,"
b11111111111111111111111111110110 -"
b1100 '"
b1100 +"
b111 !
b1100 $"
b1100 Z"
b10111111110000000000000000100000 t
bx )"
bx X"
0?
0S
0D
1L
0E
b1100 K"
b10111111110000000000000000011100 %
b10111111110000000000000000011100 7
b10111111110000000000000000011100 `
b10111111110000000000000000011100 s
b10111111110000000000000000011100 |
1y
0W
1,
#64
0,
#66
b1110 *
b1110 9
b1110 &"
b1110 1"
b1110 )"
b1110 X"
1?
1S
1D
0L
1E
0y
1W
1,
#68
0,
#70
b11111111111111111111111111110100 ."
b11100 0"
b1110 ,"
b11111111111111111111111111110100 -"
b1110 '"
b1110 +"
b1000 !
b1110 $"
b1110 Z"
b10111111110000000000000000100100 t
bx )"
bx X"
0?
0S
0D
1L
0E
b1110 K"
b10111111110000000000000000100000 %
b10111111110000000000000000100000 7
b10111111110000000000000000100000 `
b10111111110000000000000000100000 s
b10111111110000000000000000100000 |
1y
0W
1,
#72
0,
#74
b100 #
b10000 *
b10000 9
b10000 &"
b10000 1"
b10000 )"
b10000 X"
1?
1S
1D
0L
1E
0y
1W
1,
#76
0,
#78
b11111111111111111111111111110010 ."
b100000 0"
b10000 ,"
b11111111111111111111111111110010 -"
b10000 '"
b10000 +"
b1001 !
b10000 $"
b10000 Z"
b10111111110000000000000000101000 t
bx )"
bx X"
0?
0S
0D
1L
0E
b10000 K"
b10111111110000000000000000100100 %
b10111111110000000000000000100100 7
b10111111110000000000000000100100 `
b10111111110000000000000000100100 s
b10111111110000000000000000100100 |
1y
0W
1,
#80
0,
#82
b10010 *
b10010 9
b10010 &"
b10010 1"
b10010 )"
b10010 X"
1?
1S
1D
0L
1E
0y
1W
1,
#84
0,
#86
b0 ("
b0 W"
b10010 *"
b10010 5
b10010 \
b10010 q
b10010 %"
b10010 /"
b10010 Y"
b0 X
b0 c
b0 o
b1000000100001 :
b1000000100001 b
b1000000100001 g
b1000000100001 z
b10 6
b10 ]
b10 k
b10 }
b0 2
b0 Z
b0 m
b0 !"
b0 U"
b11 3
b11 [
b11 l
b11 ~
b11 T"
b11000000001000000100001 ^
b11000000001000000100001 j
b11000000001000000100001 p
b11000000001000000100001 v
b10010 ."
b11000000001000000100001 $
b11000000001000000100001 0
b11000000001000000100001 V
b11000000001000000100001 f
b0 0"
b0 ,"
b10010 -"
b0 '"
b0 +"
b1010 !
b0 $"
b0 Z"
b10111111110000000000000000101100 t
bx )"
bx X"
0?
0S
0D
1L
0E
b10010 K"
b10111111110000000000000000101000 %
b10111111110000000000000000101000 7
b10111111110000000000000000101000 `
b10111111110000000000000000101000 s
b10111111110000000000000000101000 |
1y
0W
1,
#88
0,
#90
b10 ("
b10 W"
b10010 )"
b10010 X"
1?
1S
1D
0L
1E
0y
1W
1,
#92
0,
#94
b11111111111111111111111111101110 ."
b10010 ,"
b10010 '"
b10010 +"
b10010 $"
b10010 Z"
b11111111111111111111111111101110 -"
b0 *"
b0 5
b0 \
b0 q
b0 %"
b0 /"
b0 Y"
b11 X
b11 c
b11 o
b100 a
b100 e
b100 h
b100 :
b100 b
b100 g
b100 z
b0 6
b0 ]
b0 k
b0 }
b11 2
b11 Z
b11 m
b11 !"
b11 U"
b0 3
b0 [
b0 l
b0 ~
b0 T"
b10101100000000110000000000000100 ^
b10101100000000110000000000000100 j
b10101100000000110000000000000100 p
b10101100000000110000000000000100 v
b101011 _
b101011 d
b101011 i
b10101100000000110000000000000100 $
b10101100000000110000000000000100 0
b10101100000000110000000000000100 V
b10101100000000110000000000000100 f
b1011 !
b10111111110000000000000000110000 t
b11 ("
b11 W"
bx )"
bx X"
0?
0S
0D
1L
0E
b10010 "
b10010 4
b10010 #"
b10010 V"
b10010 @"
b11000000001000000100001 u
b10111111110000000000000000101100 %
b10111111110000000000000000101100 7
b10111111110000000000000000101100 `
b10111111110000000000000000101100 s
b10111111110000000000000000101100 |
1y
0W
1,
#96
0,
#98
b1 #
b11111111111111111111111111111100 ."
b100 *
b100 9
b100 &"
b100 1"
b100 ,"
b11111111111111111111111111111100 -"
b100 '"
b100 +"
b0xx ("
b0xx W"
1S
1T
1'
xL
xE
0y
1W
1;
1,
#100
0,
#102
b0 $"
b0 Z"
b1 x
b0 X
b0 c
b0 o
b1000 a
b1000 e
b1000 h
b1000 :
b1000 b
b1000 g
b1000 z
b0 2
b0 Z
b0 m
b0 !"
b0 U"
b1000 ^
b1000 j
b1000 p
b1000 v
b0 _
b0 d
b0 i
b1000 $
b1000 0
b1000 V
b1000 f
b0 ."
b1100 !
b0 ,"
b0 -"
b0 '"
b0 +"
b10111111110000000000000000110100 t
b0 ("
b0 W"
0S
0T
0'
1L
0E
b10101100000000110000000000000100 u
b10111111110000000000000000110000 %
b10111111110000000000000000110000 7
b10111111110000000000000000110000 `
b10111111110000000000000000110000 s
b10111111110000000000000000110000 |
1y
0W
1,
#104
0,
#106
b100 )"
b100 X"
0L
xE
0y
1W
1M
1,
#108
0,
#110
b0 x
b0 a
b0 e
b0 h
b0 :
b0 b
b0 g
b0 z
b0 ^
b0 j
b0 p
b0 v
b0 $
b0 0
b0 V
b0 f
b1101 !
bx )"
bx X"
b0 t
1L
0E
b1000 u
b10111111110000000000000000110100 %
b10111111110000000000000000110100 7
b10111111110000000000000000110100 `
b10111111110000000000000000110100 s
b10111111110000000000000000110100 |
b1 r
b1 w
1y
0W
1,
#112
0,
#114
b0 #
b0 *
b0 9
b0 &"
b0 1"
b0 )"
b0 X"
1C
1A
1D
1T
0L
1E
0y
1W
1,
#116
0,
#118
b0 !
bx )"
bx X"
18
0C
0A
0D
0T
1L
0E
b0 u
b0 %
b0 7
b0 `
b0 s
b0 |
b0 r
b0 w
1y
0W
1,
#120
0,
#122
b0 )"
b0 X"
1C
1A
1D
1T
0L
1E
0y
1W
0+
1,
#123
